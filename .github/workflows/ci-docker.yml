name: CI (Docker)

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ github.repository }}/base
  CPP_IMAGE_NAME: ${{ github.repository }}/cpp-builder
  NODE_IMAGE_NAME: ${{ github.repository }}/node-builder
  BASE_IMAGE: ghcr.io/${{ github.repository }}/base:latest-amd64
  CPP_IMAGE: ghcr.io/${{ github.repository }}/cpp-builder:latest-amd64
  NODE_IMAGE: ghcr.io/${{ github.repository }}/node-builder:latest-amd64

jobs:
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      base-image: ${{ env.BASE_IMAGE }}
      cpp-image: ${{ env.CPP_IMAGE }}
      node-image: ${{ env.NODE_IMAGE }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Check if base image exists (AMD64)
      id: base-exists
      run: |
        if docker manifest inspect ${{ env.BASE_IMAGE }} >/dev/null 2>&1; then
          if docker manifest inspect ${{ env.BASE_IMAGE }} | grep -q '"architecture": "amd64"'; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Base image ${{ env.BASE_IMAGE }} (AMD64) already exists, skipping build"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Base image ${{ env.BASE_IMAGE }} exists but not for AMD64, will rebuild"
          fi
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Base image ${{ env.BASE_IMAGE }} does not exist, will build"
        fi
    
    - name: Check if C++ image exists (AMD64)
      id: cpp-exists
      run: |
        if docker manifest inspect ${{ env.CPP_IMAGE }} >/dev/null 2>&1; then
          # Check if AMD64 variant exists
          if docker manifest inspect ${{ env.CPP_IMAGE }} | grep -q '"architecture": "amd64"'; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Image ${{ env.CPP_IMAGE }} (AMD64) already exists, skipping build"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Image ${{ env.CPP_IMAGE }} exists but not for AMD64, will rebuild"
          fi
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Image ${{ env.CPP_IMAGE }} does not exist, will build"
        fi
    
    - name: Check if Node image exists (AMD64)
      id: node-exists
      run: |
        if docker manifest inspect ${{ env.NODE_IMAGE }} >/dev/null 2>&1; then
          # Check if AMD64 variant exists
          if docker manifest inspect ${{ env.NODE_IMAGE }} | grep -q '"architecture": "amd64"'; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Image ${{ env.NODE_IMAGE }} (AMD64) already exists, skipping build"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Image ${{ env.NODE_IMAGE }} exists but not for AMD64, will rebuild"
          fi
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Image ${{ env.NODE_IMAGE }} does not exist, will build"
        fi
    
    - name: Skip Docker builds (use locally built images)
      run: |
        echo "ℹ️  Docker images should be built and pushed locally using:"
        echo "   ./scripts/build-and-push-images.sh"
        echo ""
        echo "This avoids long CI build times and provides faster feedback."
        echo "Images will be pulled from registry instead of built in CI."
        
    # Uncomment these steps if you need to build images in CI
    # - name: Build and push base image
    #   if: steps.base-exists.outputs.exists == 'false'
    #   uses: docker/build-push-action@v5
    #   with:
    #     context: .
    #     file: .docker/base.Dockerfile
    #     push: true
    #     tags: ${{ env.BASE_IMAGE }}
    
    # - name: Build and push C++ image
    #   if: steps.cpp-exists.outputs.exists == 'false' || steps.base-exists.outputs.exists == 'false'
    #   uses: docker/build-push-action@v5
    #   with:
    #     context: .
    #     file: .docker/cpp-builder.Dockerfile
    #     push: true
    #     tags: ${{ env.CPP_IMAGE }}
    #     build-args: |
    #       GITHUB_REPOSITORY=${{ github.repository }}
    
    # - name: Build and push Node image
    #   if: steps.node-exists.outputs.exists == 'false'
    #   uses: docker/build-push-action@v5
    #   with:
    #     context: .
    #     file: .docker/node-builder.Dockerfile
    #     push: true
    #     tags: ${{ env.NODE_IMAGE }}

  build-cpp:
    name: Build C++ Components (Docker)
    runs-on: ubuntu-latest
    needs: build-images
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run C++ build using unified Docker CI
      env:
        DOCKER_REGISTRY: ghcr.io/${{ github.repository }}
        DOCKER_TAG_SUFFIX: latest-amd64
        REPO_URL: https://github.com/${{ github.repository }}.git
        GITHUB_REF_NAME: ${{ github.ref_name }}
      run: |
        chmod +x scripts/run-docker-ci.sh
        ./scripts/run-docker-ci.sh cpp

  build-npm:
    name: Build npm Workspace (Docker)
    runs-on: ubuntu-latest
    needs: build-images
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run npm build using unified Docker CI
      env:
        DOCKER_REGISTRY: ghcr.io/${{ github.repository }}
        DOCKER_TAG_SUFFIX: latest-amd64
        REPO_URL: https://github.com/${{ github.repository }}.git
        GITHUB_REF_NAME: ${{ github.ref_name }}
      run: |
        chmod +x scripts/run-docker-ci.sh
        ./scripts/run-docker-ci.sh npm

