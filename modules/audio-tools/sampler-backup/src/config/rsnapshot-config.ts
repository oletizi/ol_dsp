/**
 * Rsnapshot Configuration Generator
 *
 * Generates rsnapshot.conf files for sampler backups
 */

import { writeFileSync } from "fs";
import { resolve, join } from "pathe";
import { homedir } from "os";
import { execSync } from "child_process";
import type { RsnapshotConfig, SamplerConfig } from "@/types/index.js";

/**
 * Find command path using 'which' command
 * @param command - Command name to locate
 * @param fallback - Fallback path if command not found
 * @returns Full path to command or fallback
 * @internal
 */
function findCommandPath(command: string, fallback: string): string {
    try {
        const path = execSync(`which ${command}`, { encoding: 'utf-8' }).trim();
        return path || fallback;
    } catch {
        return fallback;
    }
}

/**
 * Get default rsnapshot configuration for sampler backups.
 *
 * Returns a sensible default configuration with:
 * - Backup root in ~/.audiotools/backup
 * - Retention: 7 daily, 4 weekly, 12 monthly
 * - Default sampler configurations for S5K and S3K
 *
 * @returns RsnapshotConfig with default settings
 * @public
 *
 * @example
 * ```typescript
 * const config = getDefaultRsnapshotConfig();
 * config.samplers[0].host = "my-sampler.local";
 * writeRsnapshotConfig(config, "/path/to/rsnapshot.conf");
 * ```
 */
export function getDefaultRsnapshotConfig(): RsnapshotConfig {
    return {
        snapshotRoot: resolve(homedir(), ".audiotools", "backup"),
        retain: {
            daily: 7,
            weekly: 4,
            monthly: 12,
        },
        samplers: [
            {
                type: "s5k",
                host: "pi-scsi2.local",
                sourcePath: "/home/orion/images/",
                backupSubdir: "pi-scsi2",
            },
            {
                type: "s3k",
                host: "s3k.local",
                sourcePath: "/home/orion/images/",
                backupSubdir: "s3k",
            },
        ],
        options: {
            rsyncShortArgs: "-a",
            rsyncLongArgs: "--whole-file --delete --numeric-ids --relative --delete-excluded",
            verbose: 2,
        },
    };
}

/**
 * Generate rsnapshot.conf file content from configuration.
 *
 * Creates a properly formatted rsnapshot configuration file with:
 * - Header and config version
 * - Snapshot root directory
 * - External command paths (cp, rm, rsync, ssh, logger)
 * - Retention intervals (daily, weekly, monthly)
 * - Rsync and SSH options
 * - Backup source definitions for each sampler
 *
 * @param config - Rsnapshot configuration object
 * @returns String containing complete rsnapshot.conf file content
 * @public
 *
 * @example
 * ```typescript
 * const config = getDefaultRsnapshotConfig();
 * const confContent = generateRsnapshotConfig(config);
 * console.log(confContent); // Shows rsnapshot.conf content
 * ```
 *
 * @remarks
 * - Uses 'which' to detect command paths on current system
 * - Falls back to standard paths if 'which' fails
 * - Adds tab separators as required by rsnapshot format
 * - Includes comments for readability
 */
export function generateRsnapshotConfig(config: RsnapshotConfig): string {
    const lines: string[] = [];

    // Header
    lines.push("#################################################");
    lines.push("# rsnapshot.conf - rsnapshot configuration file #");
    lines.push("#################################################");
    lines.push("# Generated by @oletizi/sampler-backup");
    lines.push("#");
    lines.push("");

    // Config version
    lines.push("config_version\t1.2");
    lines.push("");

    // Snapshot root
    lines.push("# Backup destination");
    lines.push(`snapshot_root\t${config.snapshotRoot}/`);
    lines.push("");

    // Commands (detect actual paths)
    lines.push("# External programs");
    lines.push(`cmd_cp\t\t${findCommandPath('cp', '/bin/cp')}`);
    lines.push(`cmd_rm\t\t${findCommandPath('rm', '/bin/rm')}`);
    lines.push(`cmd_rsync\t${findCommandPath('rsync', '/usr/bin/rsync')}`);
    lines.push(`cmd_ssh\t\t${findCommandPath('ssh', '/usr/bin/ssh')}`);
    lines.push(`cmd_logger\t${findCommandPath('logger', '/usr/bin/logger')}`);
    lines.push("");

    // Retention intervals
    lines.push("# Backup intervals and retention");
    for (const [interval, count] of Object.entries(config.retain)) {
        lines.push(`retain\t\t${interval}\t${count}`);
    }
    lines.push("");

    // Verbosity
    if (config.options?.verbose !== undefined) {
        lines.push("# Logging");
        lines.push(`verbose\t\t${config.options.verbose}`);
        lines.push("loglevel\t3");
        lines.push("");
    }

    // Rsync options
    lines.push("# Rsync options");
    if (config.options?.rsyncShortArgs) {
        lines.push(`rsync_short_args\t${config.options.rsyncShortArgs}`);
    }
    if (config.options?.rsyncLongArgs) {
        lines.push(`rsync_long_args\t\t${config.options.rsyncLongArgs}`);
    }
    if (config.options?.sshArgs) {
        lines.push(`ssh_args\t${config.options.sshArgs}`);
    }
    lines.push("");

    // Backup points
    lines.push("# Backup points / sources");
    lines.push("");
    for (const sampler of config.samplers) {
        lines.push(`# ${sampler.type.toUpperCase()} Sampler`);
        lines.push(
            `backup\t\t${sampler.host}:${sampler.sourcePath}\t${sampler.backupSubdir}/`
        );
        lines.push("");
    }

    return lines.join("\n");
}

/**
 * Write rsnapshot configuration to file.
 *
 * Generates configuration content and writes it to the specified path.
 * Creates parent directories if they don't exist.
 *
 * @param config - Rsnapshot configuration object
 * @param configPath - Path where configuration file should be written
 * @throws Error if file cannot be written
 * @public
 *
 * @example
 * ```typescript
 * const config = getDefaultRsnapshotConfig();
 * config.samplers[0].host = "sampler.local";
 * writeRsnapshotConfig(config, "/etc/rsnapshot.conf");
 * ```
 */
export function writeRsnapshotConfig(
    config: RsnapshotConfig,
    configPath: string
): void {
    const content = generateRsnapshotConfig(config);
    writeFileSync(configPath, content, "utf-8");
}

/**
 * Get default configuration file path.
 *
 * Returns the standard path for rsnapshot configuration file:
 * ~/.audiotools/rsnapshot.conf
 *
 * @returns Absolute path to default config file location
 * @public
 *
 * @example
 * ```typescript
 * const configPath = getDefaultConfigPath();
 * // Returns: "/Users/username/.audiotools/rsnapshot.conf"
 * ```
 */
export function getDefaultConfigPath(): string {
    return resolve(homedir(), ".audiotools", "rsnapshot.conf");
}
