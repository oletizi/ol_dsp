#!/usr/bin/env tsx
/**
 * Send the EXACT known-good SysEx data captured from the web editor
 * This will help us understand what's happening with slot mapping
 */

import { LaunchControlXL3 } from '../src/index.js';
import { EasyMidiBackend } from '../src/core/backends/EasyMidiBackend.js';

// Exact data captured from web editor for slot 0 (342 bytes)
const KNOWN_GOOD_DATA_SLOT_0 = Buffer.from([
  0xF0, 0x00, 0x20, 0x29, 0x02, 0x15, 0x05, 0x00, 0x45, 0x00, 0x01, 0x20, 0x10, 0x2A, 0x4E, 0x65,
  0x77, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6F, 0x6D, 0x20, 0x4D, 0x6F, 0x64, 0x65, 0x49, 0x10, 0x02,
  0x05, 0x00, 0x01, 0x40, 0x00, 0x0D, 0x7F, 0x00, 0x49, 0x11, 0x02, 0x05, 0x00, 0x01, 0x40, 0x00,
  0x0E, 0x7F, 0x00, 0x49, 0x12, 0x02, 0x05, 0x00, 0x01, 0x40, 0x00, 0x0F, 0x7F, 0x00, 0x49, 0x13,
  0x02, 0x05, 0x00, 0x01, 0x40, 0x00, 0x10, 0x7F, 0x00, 0x49, 0x14, 0x02, 0x05, 0x00, 0x01, 0x40,
  0x00, 0x11, 0x7F, 0x00, 0x49, 0x15, 0x02, 0x05, 0x00, 0x01, 0x40, 0x00, 0x12, 0x7F, 0x00, 0x49,
  0x16, 0x02, 0x05, 0x00, 0x01, 0x40, 0x00, 0x13, 0x7F, 0x00, 0x49, 0x17, 0x02, 0x05, 0x00, 0x01,
  0x40, 0x00, 0x14, 0x7F, 0x00, 0x49, 0x18, 0x02, 0x09, 0x00, 0x01, 0x40, 0x00, 0x15, 0x7F, 0x00,
  0x49, 0x19, 0x02, 0x09, 0x00, 0x01, 0x40, 0x00, 0x16, 0x7F, 0x00, 0x49, 0x1A, 0x02, 0x09, 0x00,
  0x01, 0x40, 0x00, 0x17, 0x7F, 0x00, 0x49, 0x1B, 0x02, 0x09, 0x00, 0x01, 0x40, 0x00, 0x18, 0x7F,
  0x00, 0x49, 0x1C, 0x02, 0x09, 0x00, 0x01, 0x40, 0x00, 0x19, 0x7F, 0x00, 0x49, 0x1D, 0x02, 0x09,
  0x00, 0x01, 0x40, 0x00, 0x1A, 0x7F, 0x00, 0x49, 0x1E, 0x02, 0x09, 0x00, 0x01, 0x40, 0x00, 0x1B,
  0x7F, 0x00, 0x49, 0x1F, 0x02, 0x09, 0x00, 0x01, 0x40, 0x00, 0x1C, 0x7F, 0x00, 0x49, 0x20, 0x02,
  0x0D, 0x00, 0x01, 0x40, 0x00, 0x1D, 0x7F, 0x00, 0x49, 0x21, 0x02, 0x0D, 0x00, 0x01, 0x40, 0x00,
  0x1E, 0x7F, 0x00, 0x49, 0x22, 0x02, 0x0D, 0x00, 0x01, 0x40, 0x00, 0x1F, 0x7F, 0x00, 0x49, 0x23,
  0x02, 0x0D, 0x00, 0x01, 0x40, 0x00, 0x20, 0x7F, 0x00, 0x49, 0x24, 0x02, 0x0D, 0x00, 0x01, 0x40,
  0x00, 0x21, 0x7F, 0x00, 0x49, 0x25, 0x02, 0x0D, 0x00, 0x01, 0x40, 0x00, 0x22, 0x7F, 0x00, 0x49,
  0x26, 0x02, 0x0D, 0x00, 0x01, 0x40, 0x00, 0x23, 0x7F, 0x00, 0x49, 0x27, 0x02, 0x0D, 0x00, 0x01,
  0x40, 0x00, 0x24, 0x7F, 0x00, 0x60, 0x10, 0x60, 0x11, 0x60, 0x12, 0x60, 0x13, 0x60, 0x14, 0x60,
  0x15, 0x60, 0x16, 0x60, 0x17, 0x60, 0x18, 0x60, 0x19, 0x60, 0x1A, 0x60, 0x1B, 0x60, 0x1C, 0x60,
  0x1D, 0x60, 0x1E, 0x60, 0x1F, 0x60, 0x20, 0x60, 0x21, 0x60, 0x22, 0x60, 0x23, 0x60, 0x24, 0x60,
  0x25, 0x60, 0x26, 0x60, 0x27, 0xF7
]);

async function testExactWebEditorData() {
  console.log('Exact Web Editor Data Test');
  console.log('===========================\n');

  let device: LaunchControlXL3 | null = null;

  try {
    // Initialize MIDI backend
    const midiBackend = new EasyMidiBackend();
    await midiBackend.initialize();

    // Monkey-patch to capture what we're sending
    const originalSend = midiBackend.sendMessage.bind(midiBackend);
    midiBackend.sendMessage = async (port: any, message: any) => {
      if (message[0] === 0xF0) { // SysEx
        console.log(`üì§ Sending SysEx: ${message.length} bytes`);

        // Show key bytes
        const slotByte = message[9];
        console.log(`   Command: 0x${message[8].toString(16).padStart(2, '0').toUpperCase()}`);
        console.log(`   Slot byte: 0x${slotByte.toString(16).padStart(2, '0').toUpperCase()} (decimal ${slotByte})`);

        // Show name if present
        if (message.length > 30) {
          const nameBytes = message.slice(14, 29);
          const name = String.fromCharCode(...nameBytes);
          console.log(`   Name: "${name}"`);
        }
      }
      return originalSend(port, message);
    };

    // Create device
    device = new LaunchControlXL3({
      midiBackend: midiBackend,
      enableLedControl: false,
      enableCustomModes: true
    });

    console.log('‚Üí Connecting to device...');
    await device.connect();
    console.log('‚úì Connected\n');

    // Send the EXACT known-good data from web editor
    console.log('=== Sending EXACT Web Editor Data ===');
    console.log('This is the exact 342-byte message captured from the web editor');
    console.log('It should write "New Custom Mode" to physical slot 2\n');

    // Get the device manager to access the output
    const deviceManager = (device as any).deviceManager;
    if (deviceManager && deviceManager.midiBackend) {
      console.log('‚Üí Sending exact web editor SysEx...');

      // Send the exact bytes
      await deviceManager.midiBackend.sendSysEx(Array.from(KNOWN_GOOD_DATA_SLOT_0));
      console.log('‚úì Sent successfully');

      // Wait for device to process
      await new Promise(resolve => setTimeout(resolve, 1000));

      console.log('\nüìã Summary:');
      console.log('- Sent exact 342-byte message from web editor');
      console.log('- Slot byte was 0x00');
      console.log('- Name was "New Custom Mode"');
      console.log('- Message included only 24 encoders (no faders/buttons)');
      console.log('\nüîç Please check the device and tell me which physical slot changed!');
    } else {
      console.error('‚úó Could not access device manager');
    }

  } catch (error) {
    console.error('\n‚úó Test failed:', error instanceof Error ? error.message : String(error));
  } finally {
    if (device) {
      console.log('\n‚Üí Disconnecting...');
      await device.disconnect();
      console.log('‚úì Disconnected');
    }
  }
}

// Run the test
testExactWebEditorData().catch(console.error);