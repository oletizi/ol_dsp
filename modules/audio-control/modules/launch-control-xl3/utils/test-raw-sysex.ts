#!/usr/bin/env tsx
/**
 * Send the EXACT raw SysEx data using easymidi directly
 */

import easymidi from 'easymidi';

// Exact data captured from web editor for slot 0 (342 bytes)
const KNOWN_GOOD_DATA_SLOT_0 = [
  0xF0, 0x00, 0x20, 0x29, 0x02, 0x15, 0x05, 0x00, 0x45, 0x00, 0x01, 0x20, 0x10, 0x2A, 0x4E, 0x65,
  0x77, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6F, 0x6D, 0x20, 0x4D, 0x6F, 0x64, 0x65, 0x49, 0x10, 0x02,
  0x05, 0x00, 0x01, 0x40, 0x00, 0x0D, 0x7F, 0x00, 0x49, 0x11, 0x02, 0x05, 0x00, 0x01, 0x40, 0x00,
  0x0E, 0x7F, 0x00, 0x49, 0x12, 0x02, 0x05, 0x00, 0x01, 0x40, 0x00, 0x0F, 0x7F, 0x00, 0x49, 0x13,
  0x02, 0x05, 0x00, 0x01, 0x40, 0x00, 0x10, 0x7F, 0x00, 0x49, 0x14, 0x02, 0x05, 0x00, 0x01, 0x40,
  0x00, 0x11, 0x7F, 0x00, 0x49, 0x15, 0x02, 0x05, 0x00, 0x01, 0x40, 0x00, 0x12, 0x7F, 0x00, 0x49,
  0x16, 0x02, 0x05, 0x00, 0x01, 0x40, 0x00, 0x13, 0x7F, 0x00, 0x49, 0x17, 0x02, 0x05, 0x00, 0x01,
  0x40, 0x00, 0x14, 0x7F, 0x00, 0x49, 0x18, 0x02, 0x09, 0x00, 0x01, 0x40, 0x00, 0x15, 0x7F, 0x00,
  0x49, 0x19, 0x02, 0x09, 0x00, 0x01, 0x40, 0x00, 0x16, 0x7F, 0x00, 0x49, 0x1A, 0x02, 0x09, 0x00,
  0x01, 0x40, 0x00, 0x17, 0x7F, 0x00, 0x49, 0x1B, 0x02, 0x09, 0x00, 0x01, 0x40, 0x00, 0x18, 0x7F,
  0x00, 0x49, 0x1C, 0x02, 0x09, 0x00, 0x01, 0x40, 0x00, 0x19, 0x7F, 0x00, 0x49, 0x1D, 0x02, 0x09,
  0x00, 0x01, 0x40, 0x00, 0x1A, 0x7F, 0x00, 0x49, 0x1E, 0x02, 0x09, 0x00, 0x01, 0x40, 0x00, 0x1B,
  0x7F, 0x00, 0x49, 0x1F, 0x02, 0x09, 0x00, 0x01, 0x40, 0x00, 0x1C, 0x7F, 0x00, 0x49, 0x20, 0x02,
  0x0D, 0x00, 0x01, 0x40, 0x00, 0x1D, 0x7F, 0x00, 0x49, 0x21, 0x02, 0x0D, 0x00, 0x01, 0x40, 0x00,
  0x1E, 0x7F, 0x00, 0x49, 0x22, 0x02, 0x0D, 0x00, 0x01, 0x40, 0x00, 0x1F, 0x7F, 0x00, 0x49, 0x23,
  0x02, 0x0D, 0x00, 0x01, 0x40, 0x00, 0x20, 0x7F, 0x00, 0x49, 0x24, 0x02, 0x0D, 0x00, 0x01, 0x40,
  0x00, 0x21, 0x7F, 0x00, 0x49, 0x25, 0x02, 0x0D, 0x00, 0x01, 0x40, 0x00, 0x22, 0x7F, 0x00, 0x49,
  0x26, 0x02, 0x0D, 0x00, 0x01, 0x40, 0x00, 0x23, 0x7F, 0x00, 0x49, 0x27, 0x02, 0x0D, 0x00, 0x01,
  0x40, 0x00, 0x24, 0x7F, 0x00, 0x60, 0x10, 0x60, 0x11, 0x60, 0x12, 0x60, 0x13, 0x60, 0x14, 0x60,
  0x15, 0x60, 0x16, 0x60, 0x17, 0x60, 0x18, 0x60, 0x19, 0x60, 0x1A, 0x60, 0x1B, 0x60, 0x1C, 0x60,
  0x1D, 0x60, 0x1E, 0x60, 0x1F, 0x60, 0x20, 0x60, 0x21, 0x60, 0x22, 0x60, 0x23, 0x60, 0x24, 0x60,
  0x25, 0x60, 0x26, 0x60, 0x27, 0xF7
];

async function testRawSysEx() {
  console.log('Raw SysEx Test - Exact Web Editor Data');
  console.log('=======================================\n');

  let output: any = null;
  let input: any = null;

  try {
    // List available MIDI devices
    console.log('Available MIDI outputs:', easymidi.getOutputs());
    console.log('Available MIDI inputs:', easymidi.getInputs());
    console.log();

    // Find Launch Control XL3
    const outputName = easymidi.getOutputs().find((name: string) => name.includes('LCXL3'));
    const inputName = easymidi.getInputs().find((name: string) => name.includes('LCXL3'));

    if (!outputName) {
      throw new Error('Launch Control XL3 not found');
    }

    console.log(`‚Üí Connecting to: ${outputName}`);
    output = new easymidi.Output(outputName);

    if (inputName) {
      input = new easymidi.Input(inputName);

      // Listen for responses
      input.on('sysex', (msg: any) => {
        console.log(`üì• Received SysEx response: ${msg.bytes.length} bytes`);
        // Show first few bytes
        const preview = msg.bytes.slice(0, 12).map((b: number) =>
          '0x' + b.toString(16).padStart(2, '0').toUpperCase()
        ).join(' ');
        console.log(`   Preview: ${preview}...`);
      });
    }

    console.log('‚úì Connected\n');

    // Send the EXACT known-good data
    console.log('=== Sending EXACT Web Editor Data ===');
    console.log(`Message length: ${KNOWN_GOOD_DATA_SLOT_0.length} bytes`);
    console.log(`Slot byte (position 9): 0x${KNOWN_GOOD_DATA_SLOT_0[9].toString(16).padStart(2, '0').toUpperCase()}`);

    // Extract and show the name
    const nameBytes = KNOWN_GOOD_DATA_SLOT_0.slice(14, 29);
    const name = String.fromCharCode(...nameBytes);
    console.log(`Name in message: "${name}"`);
    console.log();

    console.log('‚Üí Sending raw SysEx to device...');
    output.send('sysex', KNOWN_GOOD_DATA_SLOT_0);
    console.log('‚úì Sent successfully');

    // Wait for response
    await new Promise(resolve => setTimeout(resolve, 2000));

    console.log('\nüìã Summary:');
    console.log('- Sent exact 342-byte message from web editor');
    console.log('- Slot byte was 0x00');
    console.log('- Name was "New Custom Mode"');
    console.log('- Message included only 24 encoders (no faders/buttons)');
    console.log('\nüîç Please check the device and tell me which physical slot changed!');
    console.log('   (The display should show the slot number that was modified)');

  } catch (error) {
    console.error('\n‚úó Test failed:', error instanceof Error ? error.message : String(error));
  } finally {
    if (output) {
      console.log('\n‚Üí Closing MIDI connections...');
      output.close();
    }
    if (input) {
      input.close();
    }
    console.log('‚úì Disconnected');
  }
}

// Run the test
testRawSysEx().catch(console.error);